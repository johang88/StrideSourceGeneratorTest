using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StrideSourceGeneratorTest.Generators
{
    /// <summary>
    /// Genereates a string property called Dummy
    /// </summary>
    [Generator]
    public class DummyGenerator : ISourceGenerator
    {
        private const string AttributeText = @"
using System;

[AttributeUsage(AttributeTargets.Class, Inherited = false)]
sealed class DummyAttribute : Attribute
{
}
";

        public void Execute(GeneratorExecutionContext context)
        {
            var rootNameSpace = context.Compilation.GlobalNamespace.Name;
            context.AddSource("DataAssetAttribute", AttributeText);

            if (!(context.SyntaxReceiver is DummyGeneratorReceiver receiver))
            {
                return;
            }

            var options = (context.Compilation as CSharpCompilation).SyntaxTrees[0].Options as CSharpParseOptions;
            var attributeSyntaxTree = CSharpSyntaxTree.ParseText(SourceText.From(AttributeText, Encoding.UTF8), options);
            var compilation = context.Compilation.AddSyntaxTrees(attributeSyntaxTree);

            var attributeSymbol = compilation.GetTypeByMetadataName("DummyAttribute");

            foreach (var candidateClass in receiver.CandidateClasses)
            {
                var model = compilation.GetSemanticModel(candidateClass.SyntaxTree);
                if (model.GetDeclaredSymbol(candidateClass) is ITypeSymbol typeSymbol
                    && typeSymbol.GetAttributes().Any(x => x.AttributeClass.Equals(attributeSymbol, SymbolEqualityComparer.Default)))
                {
                    var namespaceName = typeSymbol.ContainingNamespace;
                    var typeName = candidateClass.Identifier.Text;

                    var source = $@"
using Stride.Core;

namespace {namespaceName}
{{
    [DataContract]
    public partial class {typeName}
    {{
        [DataMember] public string Dummy {{ get; set; }}
    }}
}}";

                    context.AddSource($"AutoGeneratedDummyProperties_{typeName}", source);
                }
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
//#if DEBUG
//            if (!Debugger.IsAttached)
//            {
//                Debugger.Launch();
//            }
//#endif
            context.RegisterForSyntaxNotifications(() => new DummyGeneratorReceiver());
        }
    }

    public class DummyGeneratorReceiver : ISyntaxReceiver
    {
        public List<ClassDeclarationSyntax> CandidateClasses { get; } = new List<ClassDeclarationSyntax>();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (syntaxNode is ClassDeclarationSyntax classDeclarationSyntax && classDeclarationSyntax.AttributeLists.Count > 0)
            {
                CandidateClasses.Add(classDeclarationSyntax);
            }
        }
    }
}
